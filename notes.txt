YARN

yarn add [package-name] will install a package into your project
ex. yarn add babel-preset-react@6.24.1
this adds them to the "dependencies" field in package.json
and it puts THEIR dependencies in the node_modules folder
yarn.lock tracks versions of all your dependencies
yarn install will look through package.json and install all the stuff in node_modules

PACKAGE.JSON

A package.json is about outlining all the dependencies
which our product needs to run.
package.json was auto-generated by yarn init.


BABEL IN BASH
babel src/app.js --out-file=public/scripts/app.js --presets=env,react --watch
babel [thing to compile] [outfile] [presets we want to use] [watch it and live-update the compiled file]
this SHOULD compile the thing but it doesn't
this is a really cool way to keep things live-updating! but it's not working

JSX
you can only have a single root element in a JSX object!
So use a WRAPPER DIV
You can't just render an object! You have to use its properties. Drill down!
JSX does not render booleans
JSX renames some HTML attributes (ex. class -> className) for complete renaming scheme, google 'react dom elements'
null, undefined, true, and false do not get rendered

REACT ITSELF
React.createElement(type, [props], [...children]) creates and returns a new React element of the given type
React elements are, plainly, HTML objects.
all array elements rendered need key identifiers
reactDOM.render(element, container[, callback]) 
the above function renders a React element into the container


JAVASCRIPT TIPS
true && 'some text' === 'some text'
the above is a really weird javascript quirk
false && 'asdf' === false

WHY WE ARE NOT GOING TO USE VAR EVER AGAIN
nameLet = 'Julie';
console.log('nameLet', nameLet);
because it's a var that can't be redundantly declared
let and const are block scoped! var is not - vars are global

REACT DOM EVENTS
SyntheticEvent page gives you a list of usable EVENTS

BREAKING TWITTER INTO REACT COMPONENTS
1. header area
<Header />

2. profile widget (bkgd image, follower numbers, etc)
<ProfileWidget />

3. Trends
<Trends />
    3.1. Trend
    <Trend />

4. Tweet
<Tweet />

AND NOW THE INDECISION APP...
IndecisionApp, Header, Action, Options, Option, AddOption
options contains option children

FUNCTIONAL COMPONENTS
are called functional components because they're simply defined as javascript functions

REACT DEVTOOLS...

Elements shows you the markup
The React panel shows you a JSX tree view, giving you (in our case) an element named IndecisionApp. Regular Markup is shown in grey
You can see the props and state of every component!
There's a search bar!
You can live-edit values of stuff! Super cool.